interface SnapCarouselGoToOptions {
    /**
     * The scroll behavior of the navigation
     * when prompted to navigate to another page.
     *
     * @default 'smooth'
     */
    readonly behavior?: ScrollBehavior;
}
interface SnapCarouselResult {
    readonly pages: number[][];
    readonly activePageIndex: number;
    readonly snapPointIndexes: Set<number>;
    readonly hasPrevPage: boolean;
    readonly hasNextPage: boolean;
    readonly prev: (opts?: SnapCarouselGoToOptions) => void;
    readonly next: (opts?: SnapCarouselGoToOptions) => void;
    readonly goTo: (pageIndex: number, opts?: SnapCarouselGoToOptions) => void;
    readonly refresh: () => void;
    readonly scrollRef: (el: HTMLElement | null) => void;
}
interface SnapCarouselOptions {
    readonly axis?: 'x' | 'y';
    readonly initialPages?: number[][];
}
declare const useSnapCarousel: ({ axis, initialPages }?: SnapCarouselOptions) => SnapCarouselResult;

export { SnapCarouselOptions, SnapCarouselResult, useSnapCarousel };
